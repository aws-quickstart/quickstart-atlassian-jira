{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Atlassian JIRA Data Center",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "JIRA"
          },
          "Parameters": [
            "JiraVersion"
          ]
        },
        {
          "Label": {
            "default": "Scaling"
          },
          "Parameters": [
            "ClusterNodeMax",
            "ClusterNodeMin",
            "ClusterNodeInstanceType"
          ]
        },
        {
          "Label": {
            "default": "JIRA Database"
          },
          "Parameters": [
            "DBInstanceClass",
            "DBMasterUserPassword",
            "DBName",
            "DBPassword",
            "DBStorage",
            "DBStorageType",
            "DBIops",
            "DBMultiAZ"
          ]
        },
        {
          "Label": {
            "default": "Networking"
          },
          "Parameters": [
            "AssociatePublicIpAddress",
            "KeyName",
            "SSLCertificateName",
            "VPC",
            "Subnets",
            "AvailabilityZones"
          ]
        },
        {
          "Label": {
            "default": "(Optional) Advanced Options"
          },
          "Parameters": [
            "CatalinaOpts",
            "StartCollectd"
          ]
        }
      ],
      "ParameterLabels": {
        "AssociatePublicIpAddress": {
          "default": "Assign public IP"
        },
        "AvailabilityZones": {
          "default": "Availability zones"
        },
        "CatalinaOpts": {
          "default": "Catalina Options"
        },
        "StartCollectd": {
          "default": "Should collectd service be started"
        },
        "ClusterNodeMax": {
          "default": "Maximum number of cluster nodes"
        },
        "ClusterNodeMin": {
          "default": "Minimum number of cluster nodes"
        },
        "ClusterNodeInstanceType": {
          "default": "JIRA cluster node instance type"
        },
        "DBInstanceClass": {
          "default": "Database instance class"
        },
        "DBMasterUserPassword": {
          "default": "Master password"
        },
        "DBName": {
          "default": "JIRA database name"
        },
        "DBPassword": {
          "default": "JIRA database password"
        },
        "DBStorage": {
          "default": "Database storage"
        },
        "DBStorageType": {
          "default": "Database storage type"
        },
        "DBIops": {
          "default": "RDS Provisioned IOPS"
        },
        "DBMultiAZ": {
          "default": "HA Database across Availability Zones"
        },
        "JiraVersion": {
          "default": "JIRA Version"
        },
        "KeyName": {
          "default": "Key Name"
        },
        "SSLCertificateName": {
          "default": "SSL Certificate Name"
        },
        "Subnets": {
          "default": "Subnets"
        },
        "VPC": {
          "default": "VPC"
        }
      }
    }
  },
  "Parameters": {
    "AssociatePublicIpAddress": {
      "Description": "Controls if the EC2 instances are assigned a public IP address",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "Must be 'true' or 'false'."
    },
    "AvailabilityZones": {
      "Description": "Two (2) or more, MUST MATCH Subnets",
      "Type": "List<AWS::EC2::AvailabilityZone::Name>",
      "ConstraintDescription": "Must be the names of two or more Availability Zones in the specified Region, and must match the Subnets"
    },
    "ClusterNodeMax": {
      "Type": "Number",
      "Default": "1"
    },
    "ClusterNodeMin": {
      "Type": "Number",
      "Default": "1"
    },
    "ClusterNodeInstanceType": {
      "Type": "String",
      "Default": "c3.xlarge",
      "AllowedValues": [
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "m3.xlarge",
        "m3.2xlarge",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "x1.32xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 HVM instance type. 'xlarge' or larger."
    },
    "CatalinaOpts": {
      "Type": "String",
      "Default": ""
    },
    "StartCollectd": {
      "Description": "Should the collectd service be started",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "Must be 'true' or 'false'."
    },
    "DBInstanceClass": {
      "Description": "RDS instance type",
      "Type": "String",
      "Default": "db.m4.xlarge",
      "AllowedValues": [
        "db.m4.large",
        "db.m4.xlarge",
        "db.m4.2xlarge",
        "db.m4.4xlarge",
        "db.m4.10xlarge",
        "db.r3.large",
        "db.r3.xlarge",
        "db.r3.2xlarge",
        "db.r3.4xlarge",
        "db.r3.8xlarge",
        "db.t2.medium",
        "db.t2.large"
      ],
      "ConstraintDescription": "Must be a valid RDS instance class, 'db.t2.medium' or larger."
    },
    "DBMasterUserPassword": {
      "NoEcho": "true",
      "Default": "",
      "Description": "Database admin account password.",
      "Type": "String",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "Must be at least 8 alphanumeric characters."
    },
    "DBName": {
      "Description": "Database name",
      "Type": "String",
      "Default": "jira",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9_-]*",
      "ConstraintDescription": "Must not be blank, and may contain only alphanumeric characters, underscore ('_'), and hyphen ('-')."
    },
    "DBPassword": {
      "Default": "",
      "Description": "Database user account password.",
      "Type": "String",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "Must contain only alphanumeric characters.",
      "NoEcho": "true"
    },
    "DBMultiAZ": {
      "Description": "Database High availability across Availability Zones",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "Must be 'true' or 'false'."
    },    
    "DBStorage": {
      "Description": "Database allocated storage size, in gigabytes (GB)",
      "Type": "Number",
      "Default": "10"
    },
    "DBStorageType": {
      "Description": "Database storage type",
      "Type": "String",
      "Default": "Provisioned IOPS",
      "AllowedValues": [
        "General Purpose (SSD)",
        "Provisioned IOPS"
      ],
      "ConstraintDescription": "Must be 'General Purpose (SSD)' or 'Provisioned IOPS'."
    },
    "DBIops": {
      "Description": "Shou;d be in the range of 1000 - 20000, and only used with Provisioned IOPS.  Note: The ratio of iops per allocated-storage must be between 3.00 and 10.00.",
      "Type": "Number",
      "Default": "1000",
      "MinValue": "1000",
      "MaxValue": "20000",
      "ConstraintDescription": "Must be in the range 1000 - 20000."
    },    
    "JiraVersion": {
      "Description": "The version of JIRA to install",
      "Type": "String",
      "Default": "7.3.0-SNAPSHOT",
      "AllowedPattern": "(\\d+\\.\\d+\\.\\d+(-?.*))",
      "ConstraintDescription": "Must be a valid JIRA version number. For example: 7.2.2 or higher"
    },
    "KeyName": {
      "Description": "The EC2 Key Pair to allow SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 Key Pair."
    },
    "SSLCertificateName": {
      "Description": "The name of your Server Certificate to use for HTTPS.  Leave blank if you don't want to set up HTTPS at this time",
      "Type": "String",
      "MinLength": "0",
      "MaxLength": "32",
      "Default": ""
    },
    "Subnets": {
      "Description": "Subnets (two or more) within the selected VPC",
      "Type": "List<AWS::EC2::Subnet::Id>",
      "ConstraintDescription": "Must be a list of two or more Subnet ID's within the selected VPC."
    },
    "VPC": {
      "Description": "Virtual Private Cloud",
      "Type": "AWS::EC2::VPC::Id",
      "ConstraintDescription": "Must be the ID of a VPC."
    }
  },
  "Conditions": {
    "DBProvisionedIops": {
      "Fn::Equals": [
        {
          "Ref": "DBStorageType"
        },
        "Provisioned IOPS"
      ]
    },
    "DoCollectd": {
          "Fn::Equals": [
            {
              "Ref": "StartCollectd"
            },
            "true"
      ]
    },
    "DoSetDBMasterUserPassword": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "DBMasterUserPassword"
            },
            ""
          ]
        }
      ]
    },
    "DoSSL": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "SSLCertificateName"
            },
            ""
          ]
        }
      ]
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "c3.large": {
        "Arch": "HVM64"
      },
      "c3.xlarge": {
        "Arch": "HVM64"
      },
      "c3.2xlarge": {
        "Arch": "HVM64"
      },
      "c3.4xlarge": {
        "Arch": "HVM64"
      },
      "c3.8xlarge": {
        "Arch": "HVM64"
      },
      "c4.large": {
        "Arch": "HVM64"
      },
      "c4.xlarge": {
        "Arch": "HVM64"
      },
      "c4.2xlarge": {
        "Arch": "HVM64"
      },
      "c4.4xlarge": {
        "Arch": "HVM64"
      },
      "c4.8xlarge": {
        "Arch": "HVM64"
      },
      "d2.xlarge": {
        "Arch": "HVM64"
      },
      "d2.2xlarge": {
        "Arch": "HVM64"
      },
      "d2.4xlarge": {
        "Arch": "HVM64"
      },
      "d2.8xlarge": {
        "Arch": "HVM64"
      },
      "i2.xlarge": {
        "Arch": "HVM64"
      },
      "i2.2xlarge": {
        "Arch": "HVM64"
      },
      "i2.4xlarge": {
        "Arch": "HVM64"
      },
      "i2.8xlarge": {
        "Arch": "HVM64"
      },
      "m4.large": {
        "Arch": "HVM64"
      },
      "m4.xlarge": {
        "Arch": "HVM64"
      },
      "m4.2xlarge": {
        "Arch": "HVM64"
      },
      "m4.4xlarge": {
        "Arch": "HVM64"
      },
      "m4.10xlarge": {
        "Arch": "HVM64"
      },
      "r3.large": {
        "Arch": "HVM64"
      },
      "r3.xlarge": {
        "Arch": "HVM64"
      },
      "r3.2xlarge": {
        "Arch": "HVM64"
      },
      "r3.4xlarge": {
        "Arch": "HVM64"
      },
      "r3.8xlarge": {
        "Arch": "HVM64"
      },
      "x1.32xlarge": {
        "Arch": "HVM64"
      }
    },
    "AWSRegionArch2AMI": {
      "ap-southeast-2": {
        "HVM64": "ami-acab9bcf",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-south-1": {
        "HVM64": "ami-a8c0b5c7",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-west-1": {
        "HVM64": "ami-ba6327c9",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-southeast-1": {
        "HVM64": "ami-c10eaba2",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-central-1": {
        "HVM64": "ami-56fe0239",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-northeast-2": {
        "HVM64": "ami-3872a756",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-northeast-1": {
        "HVM64": "ami-0a31ec6b",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-east-1": {
        "HVM64": "ami-8598dd92",
        "HVMG2": "NOT_SUPPORTED"
      },
      "sa-east-1": {
        "HVM64": "ami-79108315",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-west-1": {
        "HVM64": "ami-3d7f315d",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-west-2": {
        "HVM64": "ami-8cfc23ec",
        "HVMG2": "NOT_SUPPORTED"
      }
    }
  },
  "Resources": {
    "ClusterNodeGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Ref": "AvailabilityZones"
        },
        "DesiredCapacity": {
          "Ref": "ClusterNodeMin"
        },
        "LaunchConfigurationName": {
          "Ref": "ClusterNodeLaunchConfig"
        },
        "MaxSize": {
          "Ref": "ClusterNodeMax"
        },
        "MinSize": {
          "Ref": "ClusterNodeMin"
        },
        "LoadBalancerNames": [
          {
            "Ref": "LoadBalancer"
          }
        ],
        "VPCZoneIdentifier": {
          "Ref": "Subnets"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "JIRA Node",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Cluster",
            "Value": {
              "Ref": "AWS::StackName"
            },
            "PropagateAtLaunch": true
          }
        ]
      }
    },
    "ClusterNodeLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": [
        "EFSMountAz1",
        "EFSMountAz2",
        "DB"
      ],
      "Metadata": {
        "Comment": "",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "0"
            ]
          },
          "0": {
            "files": {
              "/etc/atl": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "ATL_APP_DATA_MOUNT_ENABLED=false\n",
                      "ATL_DB_PASSWORD=",
                      {
                        "Ref": "DBMasterUserPassword"
                      },
                      "\n",
                      "ATL_DB_NAME=",
                      {
                        "Ref": "DBName"
                      },
                      "\n",
                      "ATL_DB_HOST=",
                      {
                        "Fn::GetAtt": [
                          "DB",
                          "Endpoint.Address"
                        ]
                      },
                      "\n",
                      "ATL_DB_PORT=",
                      {
                        "Fn::GetAtt": [
                          "DB",
                          "Endpoint.Port"
                        ]
                      },
                      "\n",
                      "ATL_JDBC_DRIVER=org.postgresql.Driver\n",
                      "ATL_JDBC_URL=jdbc:postgresql://",
                      {
                        "Fn::GetAtt": [
                          "DB",
                          "Endpoint.Address"
                        ]
                      },
                      ":",
                      {
                        "Fn::GetAtt": [
                          "DB",
                          "Endpoint.Port"
                        ]
                      },
                      "/",
                      {
                        "Ref": "DBName"
                      },
                      "\n",
                      "ATL_JDBC_USER=atljira\n",
                      "ATL_JDBC_PASSWORD=",
                      {
                        "Ref": "DBPassword"
                      },
                      "\n",
                      "ATL_ENABLED_PRODUCTS=Jira\n",
                      "ATL_ENABLED_SHARED_HOMES=\n",
                      "ATL_JIRA_VERSION=",
                      {
                        "Ref": "JiraVersion"
                      },
                      "\n",
                      "ATL_JIRA_DATA_CENTER=true\n",
                      "ATL_NGINX_ENABLED=false\n",
                      "ATL_POSTGRES_ENABLED=false\n",
                      "ATL_PROXY_NAME=",
                      {
                        "Fn::GetAtt": [
                          "LoadBalancer",
                          "DNSName"
                        ]
                      },
                      "\n",
                      "ATL_SSL_SELF_CERT_ENABLED=false\n",
                      {
                        "Fn::If": [
                          "DoSSL",
                          "ATL_SSL_PROXY=true\n",
                          {
                            "Ref": "AWS::NoValue"
                          }
                        ]
                      }
                    ]
                  ]
                }
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.ClusterNodeLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource ClusterNodeLaunchConfig ",
                      "         --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "commands": {
              "010_make_mount_point": {
                "command": "mkdir -p /media/atl",
                "ignoreErrors": "false"
              },
              "020_add_nfs_mount": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo ",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).",
                            {
                              "Ref": "ElasticFileSystem"
                            },
                            ".efs.",
                            {
                              "Ref": "AWS::Region"
                            },
                            ".amazonaws.com"
                          ]
                        ]
                      },
                      ":/ /media/atl nfs4 noatime,intr,rsize=32768,wsize=32768 0 0 >>/etc/fstab"
                    ]
                  ]
                },
                "ignoreErrors": "false"
              },
              "030_mount_all": {
                "command": "mount -a",
                "ignoreErrors": "false"
              },
              "040_make_shared_home_dir": {
                "command": "mkdir -p /media/atl/jira/shared",
                "ignoreErrors": "false"
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                },
                "collectd": {
                  "Fn::If": [
                    "DoCollectd",
                    {
                      "enabled": "true",
                      "ensureRunning": "true"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                "rpcbind": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "packages": {
                    "yum": [
                      "nfs-utils"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "Properties": {
        "AssociatePublicIpAddress": {
          "Ref": "AssociatePublicIpAddress"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {},
            "NoDevice": true
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "ClusterNodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "ClusterNodeInstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource ClusterNodeLaunchConfig ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource ClusterNodeGroup ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "ElasticFileSystem": {
      "Type": "AWS::EFS::FileSystem",
      "Properties": {
        "FileSystemTags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "EFSMountAz1": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "ElasticFileSystem"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SubnetId": {
          "Fn::Select": [
            "0",
            {
              "Ref": "Subnets"
            }
          ]
        }
      }
    },
    "EFSMountAz2": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "ElasticFileSystem"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SubnetId": {
          "Fn::Select": [
            "1",
            {
              "Ref": "Subnets"
            }
          ]
        }
      }
    },
    "DB": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName": {
          "Ref": "DBName"
        },
        "AllocatedStorage": {
          "Ref": "DBStorage"
        },
        "DBInstanceClass": {
          "Ref": "DBInstanceClass"
        },
        "DBSubnetGroupName": {
          "Ref": "DBSubnetGroup"
        },
        "Engine": "postgres",
        "EngineVersion": "9.3.12",
        "MasterUsername": "postgres",
        "MasterUserPassword": {
          "Fn::If": [
            "DoSetDBMasterUserPassword",
            {
              "Ref": "DBMasterUserPassword"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "StorageType": {
          "Fn::If": [
            "DBProvisionedIops",
            "io1",
            "gp2"
          ]
        },
        "Iops": {
          "Fn::If": [
            "DBProvisionedIops",
            {
              "Ref": "DBIops"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "MultiAZ": {
          "Ref": "DBMultiAZ"
        },
        "VPCSecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "Tags" : [ 
          { 
            "Key" : "Name", 
            "Value" : "Jira PostGres Database" 
          } 
        ]
      }
    },
    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "DBSubnetGroup",
        "SubnetIds": {
          "Ref": "Subnets"
        }
      }
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AppCookieStickinessPolicy": [
          {
            "CookieName": "JSESSIONID",
            "PolicyName": "JSessionIdStickiness"
          }
        ],
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": 300
        },
        "ConnectionSettings": {
          "IdleTimeout": 3600
        },
        "CrossZone": "true",
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "InstancePort": {
              "Fn::If": [
                "DoSSL",
                "8081",
                "8080"
              ]
            },
            "InstanceProtocol": "HTTP",
            "PolicyNames": [
              "JSessionIdStickiness"
            ]
          },
          {
            "Fn::If": [
              "DoSSL",
              {
                "LoadBalancerPort": "443",
                "Protocol": "HTTPS",
                "InstancePort": "8080",
                "InstanceProtocol": "HTTP",
                "PolicyNames": [
                  "JSessionIdStickiness"
                ],
                "SSLCertificateId": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":server-certificate/",
                      {
                        "Ref": "SSLCertificateName"
                      }
                    ]
                  ]
                }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:8080/status",
          "Timeout": "29",
          "Interval": "30",
          "UnhealthyThreshold": "2",
          "HealthyThreshold": "2"
        },
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "Subnets": {
          "Ref": "Subnets"
        }
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group allowing SSH and HTTP/HTTPS access",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "SecurityGroup"
        },
        "IpProtocol": "-1",
        "FromPort": "-1",
        "ToPort": "-1",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroup"
        }
      }
    }
  },
  "Outputs": {
    "URL": {
      "Description": "The URL of the JIRA Data Center instance",
      "Value": {
        "Fn::Join": [
          "",
          [
            {
              "Fn::If": [
                "DoSSL",
                "https",
                "http"
              ]
            },
            "://",
            {
              "Fn::GetAtt": [
                "LoadBalancer",
                "DNSName"
              ]
            }
          ]
        ]
      }
    }
  }
}
